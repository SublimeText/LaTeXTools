/*
LaTeX Package keymap for OS X
*/
[
	// Hide inline build error phantoms
	{
		"keys": ["escape"],
		"command": "latextools_make_pdf", "args": { "hide_annotations_only": true },
		"context": [
			{ "key": "latextools_inline_errors_visible" }
		]
	},

	// these also override ST commands
	{
		"keys": ["super+v"],
		"command": "latextools_smart_paste",
		"context": [
			{ "key": "selector", "operand": "text.tex.latex" },
			{ "key": "latextools.setting.enable_smart_paste" }
		]
	},

	// Avoid weird brace-matching behavior with indented text
	{
		"keys": ["{"],
		"command": "insert_snippet", "args": { "contents": "{$0}" },
		"context": [
			{ "key": "indented_block", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex - text.tex.latex meta.environment.math" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_match", "operand": "^$", "match_all": true }
		]
	},
	// Enable auto-bairing braces in front of termination
	{
		"keys": ["{"],
		"command": "insert_snippet", "args": { "contents": "{$0}" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex meta.environment.math" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\$", "match_all": true }
		]
	},

	// New-style keybindings use "cmd+l" as a prefix
	// This overrides "extend selection to line", which is remapped to
	// "cmd+l","cmd+l"
	// However, keybindings are scoped to the text.tex.latex selector, so they do not
	// pollute the standard bindings

	// Reassign expand_selection to ctrl+l, ctrl+l
	{
		"keys": ["super+l","super+l"],
		"command": "expand_selection", "args": { "to": "line" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},

	// Insert latex command or environment, and close current environment
	{
		"keys": ["super+l","c"],
		"command": "latextools_latex_cmd",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l","e"],
		"command": "latextools_latex_env",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l","."],
		"command": "latextools_latex_env_closer",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},

	// Bindings for completions
	// cmd+l,ctrl+space suggests ST2's standard autocompletion keybinding, but for LaTeX;
	// cmd+l,x suggests "cross" references, which both cites and refs are
	// TODO: remove cmd+l,ctrl+space
	{
		"keys": ["super+l","ctrl+space"],
		"command": "latextools_fill_all",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l","x"],
		"command": "latextools_fill_all", "args": { "completion_type": ["cite", "ref"] },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l","alt+x","c"],
		"command": "latextools_fill_all", "args": { "completion_type": "cite", "force": true },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l","alt+x","r"],
		"command": "latextools_fill_all", "args": { "completion_type": "ref", "force": true },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},

	// Fill helper command
	{
		"keys": ["super+l","super+f"],
		"command": "latextools_fill_all",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l","super+alt+f"],
		"command": "latextools_fill_all", "args": { "overwrite": true },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},

	{
		"keys": ["{"],
		"command": "latextools_fill_all", "args": { "completion_type": "ref", "insert_char": "{" },
		"context": [
			{ "key": "setting.disable_latex_ref_cite_auto_trigger", "operator": "not_equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex - comment" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "lt_fill_all_ref.open_curly", "operator": "equal", "match_all": true, "operand": true }
		]
	},

	{
		"keys": ["{"],
		"command": "latextools_fill_all", "args": { "completion_type": "cite", "insert_char": "{" },
		"context": [
			{ "key": "setting.disable_latex_ref_cite_auto_trigger", "operator": "not_equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex - comment" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "lt_fill_all_cite.open_curly", "operator": "equal", "match_all": true, "operand": true }
		]
	},

	{
		"keys": [","],
		"command": "latextools_fill_all", "args": { "completion_type": "cite", "insert_char": "," },
		"context": [
			{ "key": "setting.disable_latex_ref_cite_auto_trigger", "operator": "not_equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex - comment" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "lt_fill_all_cite.comma", "operator": "equal", "match_all": true, "operand": true }
		]
	},

	{
		"keys": [","],
		"command": "latextools_fill_all", "args": { "completion_type": "ref", "insert_char": "," },
		"context": [
			{ "key": "setting.disable_latex_ref_cite_auto_trigger", "operator": "not_equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex - comment" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "lt_fill_all_ref.comma", "operator": "equal", "match_all": true, "operand": true }
		]
	},

	{
		"keys": ["["],
		"command": "latextools_fill_all", "args": { "completion_type": "cite", "insert_char": "[" },
		"context": [
			{ "key": "setting.disable_latex_ref_cite_auto_trigger", "operator": "not_equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex - comment" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "lt_fill_all_cite.open_square", "operator": "equal", "match_all": true, "operand": true }
		]
	},

	{
		"keys": ["{"],
		"command": "latextools_fill_all", "args": { "completion_type": "input", "insert_char": "{" },
		"context": [
			{ "key": "setting.disable_latex_ref_cite_auto_trigger", "operator": "not_equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex - comment" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "lt_fill_all_input.open_curly", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	{
		"keys": [","],
		"command": "latextools_fill_all", "args": { "completion_type": "input", "insert_char": "," },
		"context": [
			{ "key": "setting.disable_latex_ref_cite_auto_trigger", "operator": "not_equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex - comment" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "lt_fill_all_input.comma", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	{
		"keys": ["{"],
		"command": "latextools_fill_all", "args": { "completion_type": "env", "insert_char": "{" },
		"context": [
			{ "key": "setting.disable_latex_ref_cite_auto_trigger", "operator": "not_equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex - comment" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "lt_fill_all_env.open_curly", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	{
		"keys": ["{"],
		"command": "latextools_fill_all", "args": { "completion_type": "glossary", "insert_char": "{" },
		"context": [
			{ "key": "setting.disable_latex_ref_cite_auto_trigger", "operator": "not_equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex - comment" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "lt_fill_all_glossary.open_curly", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	{
		"keys": ["="],
		"command": "latextools_fill_all", "args": { "completion_type": "directive", "insert_char": "=" },
		"context": [
			{ "key": "setting.disable_latex_ref_cite_auto_trigger", "operator": "not_equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex comment.line.percentage" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "lt_fill_all_directive.equal_sign", "operator": "equal", "match_all": true, "operand": true }
		]
	},

	// add a keybinding to auto-insert labels similar to the fill-all helper
	{
		"keys": ["super+l","super+f"],
		"command": "latextools_auto_insert_label",
		"context": [
			{ "key": "selector", "operand": "text.tex.latex" },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\\\label\\{$", "match_all": true },
			{ "key": "following_text", "operator": "regex_match", "operand": "\\}", "match_all": true }

		]
	},
	{
		"keys": ["{"],
		"command": "latextools_auto_insert_label",
		"context": [
			{ "key": "selector", "operand": "text.tex.latex" },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\\\label$", "match_all": true },
			{ "key": "latextools.setting.auto_label_auto_trigger" }
		]
	},

	// View PDF, jump to point, toggle editor/viewer focus and syncing behavior
	{
		"keys": ["super+l","v"],
		"command": "latextools_view_pdf",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l","j"],
		"command": "latextools_jump_to_pdf", "args": { "from_keybinding": true },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l", "t", "<character>"],
		"command": "latextools_toggle_keys",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l", "t", "a", "<character>"],
		"command": "latextools_toggle_keys", "args": { "prefix": "a" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},

	// Jump to a tex file (will create the file if it does not exists)
	{
		"keys": ["super+l", "super+o"],
		"command": "latextools_jumpto_file", "args": { "auto_create_missing_folders": true, "auto_insert_root": true },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	// Jump to anywhere
	// This will select the executed jump according to the context,
	// e.g. if the cursor is inside a ref command it will jump to the corresponding label
	{
		"keys": ["super+l", "super+j"],
		"command": "latextools_jumpto_anywhere",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},

	// Wrap selected text in command or environment
	{
		"keys": ["super+l","super+c"],
		"command": "insert_snippet", "args": { "name":"Packages/LaTeXTools/Wrap in command.sublime-snippet" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l","super+n"],
		"command": "insert_snippet", "args": { "name":"Packages/LaTeXTools/Wrap in environment.sublime-snippet" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l","super+n"],
		"command": "insert_snippet", "args": { "name":"Packages/LaTeXTools/Insert environment.sublime-snippet" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},
	// Change the surrounding environment
	{
		"keys": ["super+l", "shift+super+n"],
		"command": "latextools_change_environment",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	// Toggle the starred version of environment
	{
		"keys": ["super+l", "shift+super+8"],
		"command": "latextools_toggle_environment_star",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},

	// Wrap selected text in emph, bold or underline
	{
		"keys": ["super+l","super+e"],
		"command": "insert_snippet", "args": { "name":"Packages/LaTeXTools/Text emphasize.sublime-snippet" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l","super+b"],
		"command": "insert_snippet", "args": { "name":"Packages/LaTeXTools/Text boldface.sublime-snippet" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l","super+s"],
		"command": "insert_snippet", "args": { "name":"Packages/LaTeXTools/Text slanted.sublime-snippet" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l","super+u"],
		"command": "insert_snippet", "args": { "name":"Packages/LaTeXTools/Text underline.sublime-snippet" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	{
		"keys": ["super+l","super+t"],
		"command": "insert_snippet", "args": { "name":"Packages/LaTeXTools/Text monospace.sublime-snippet" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},

	// Replace the `C-r` overlay and the `C-shift-r` overlay with a
	// whole document overlay as opt-out
	// Also add these overlays to `C-l, C-r` and `C-l, C-shift-r`
	{
		"keys": ["super+r"],
		"command": "latextools_toc_quickpanel", "args": { "only_current_file": true },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex" },
			{ "key": "overwrite_goto_overlay" }
		]
	},
	{
		"keys": ["super+shift+r"],
		"command": "latextools_toc_quickpanel", "args": { "only_current_file": false },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex" },
			{ "key": "overwrite_goto_overlay" }
		]
	},
	{
		"keys": ["super+l","super+r"],
		"command": "latextools_toc_quickpanel", "args": { "only_current_file": true },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex" }
		]
	},
	{
		"keys": ["super+l","super+shift+r"],
		"command": "latextools_toc_quickpanel", "args": { "only_current_file": false },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex" }
		]
	},

	// Show panel
	{
		"keys": ["shift+escape"],
		"command": "show_panel", "args": { "panel": "output.latextools" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "panel_visible", "operator": "equal", "operand": false }
		]
	},

		// Auto-pair ``$''
		// Lifted from default file
	// insert matching $
	// note the "key": "selector" line!
	// fully close $$ environments
	{
		"keys": ["$"],
		"command": "insert_snippet", "args": { "contents": "\\$$0\\$" },
		"context": [
			{ "key": "setting.command_mode", "operator": "equal", "operand": false },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			// do not insert this if it is escaped
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "(?:\\\\\\\\)*(?:\\\\|\\$)$", "match_all": true },
			// don't insert, it inside math environments
			{ "key": "selector", "operator": "not_equal", "operand": "meta.environment.math, string.other.math", "match_all": true },
			// don't insert, if there is an open dollar math environment at the end of the line
			{ "key": "eol_selector", "operator": "not_equal",
			  "operand": "meta.environment.math.inline.dollar - punctuation.definition.string.end, string.other.math - punctuation.definition.string.end",
			  "match_all": true }
		]
	},
	// wrap in $
	{
		"keys": ["$"],
		"command": "insert", "args": { "characters": "$$" },
		"context": [
			{ "key": "setting.command_mode", "operator": "equal", "operand": false },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex meta.environment.math.block.dollar" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			// do not insert this if it is escaped
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "(?:\\\\\\\\)*(?:\\\\|\\$)$", "match_all": true }
		]
	},
	{
		"keys": ["$"],
		"command": "insert_snippet", "args": { "contents": "\\$${0:$SELECTION}\\$" },
		"context": [
			{ "key": "setting.command_mode", "operator": "equal", "operand": false },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	// move over closing $
	{
		"keys": ["$"],
		"command": "move", "args": { "by": "characters", "forward": true },
		"context": [
			{ "key": "setting.command_mode", "operator": "equal", "operand": false },
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\$", "match_all": true }
		]
	},
	// delete $ pair
	{
		"keys": ["backspace"],
		"command": "run_macro_file", "args": { "file": "Packages/Default/Delete Left Right.sublime-macro" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\$$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\$", "match_all": true }
		]
	},

		// overlay specifications (Tobias Schmidt)
	// FIXME: the scope for the four following should actually be text.tex.latex.beamer, but for some reason this does not seem to work
	// wrap in <>
	{
		"keys": ["<"],
		"command": "insert_snippet", "args": { "contents": "<${1:+-}>$0" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex - (string.other.math, meta.environment.math)" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\\\(?:item|only|textbf|color|onslide|only|uncover|visible|invisible|alt|temporal)$", "match_all": true }
		]
	},
	{
		"keys": ["<"],
		"command": "insert_snippet", "args": { "contents": "<${0:$SELECTION}>" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	// move over closing >
	{
		"keys": [">"],
		"command": "move", "args": { "by": "characters", "forward": true },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^>", "match_all": true }
		]
	},
	// delete <> pair
	{
		"keys": ["backspace"],
		"command": "run_macro_file", "args": { "file": "Packages/Default/Delete Left Right.sublime-macro" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "<$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^>", "match_all": true }
		]
	},
	// autopair quotation marks (`')
	{
		"keys": ["`"],
		"command": "insert_snippet", "args": { "contents": "`$0'" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},
	{
		"keys": ["`"],
		"command": "insert_snippet", "args": { "contents": "`${0:$SELECTION}'" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{
		"keys": ["'"],
		"command": "move", "args": { "by": "characters", "forward": true },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true }
		]
	},
	{
		"keys": ["backspace"],
		"command": "run_macro_file", "args": { "file": "Packages/Default/Delete Left Right.sublime-macro" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "`$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true }
		]
	},
	// automatic addition of new \items when hitting Shift+Enter in a list environment
	// create a \item[] in a description environment
	{
		"keys": ["shift+enter"],
		"command": "insert_snippet", "args": { "contents": "\n\\item $0" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex meta.environment.list, meta.function.environment.list.latex" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	{
		"keys": ["shift+enter"],
		"command": "insert_snippet", "args": { "contents": "\n\\item[$1] $0" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex meta.environment.list.description" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	// shift+super+{up,down} for super/subscripts with braces
	// (courtesy of Tobias Schmidt; I only changed the keybindings)

	{
		"keys": ["shift+super+down"],
		"command": "insert_snippet", "args": { "contents": "_{$1}$0" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex meta.environment.math" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	{
		"keys": ["shift+super+up"],
		"command": "insert_snippet", "args": { "contents": "^{$1}$0" },
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex meta.environment.math" },
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
		]
	},

	// super+l,backspace to remove temporary files
	{
		"keys": ["super+l", "backspace"],
		"command": "latextools_delete_temp_files",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},
	// Delete/clear local Cache
	{
		"keys": ["super+l","super+d","super+c"],
		"command": "latextools_clear_local_cache",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	},

	// super+l,w to display word count
	{
		"keys": ["super+l", "w"],
		"command": "latextools_texcount",
		"context": [
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex" }
		]
	}
]
