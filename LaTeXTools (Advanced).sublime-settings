{
// ------------------------------------------------------------------
// Configuring the table of content quickpanel (C-r)
// ------------------------------------------------------------------

	// the commands, which will be treated as sections,
	// i.e. the commands, which will be inserted into the quickpanel
	"toc_section_commands": [
		"part",
		"chapter",
		"section",
		"subsection",
		"subsubsection",
		"paragraph",
		"addpart",
		"addchap",
		"addsec",
		"minisec"
	],
	// a mapping from each section command to its indent
	"toc_indentations": {
		"part": 0,
		"chapter": 1,
		"section": 2,
		"subsection": 3,
		"subsubsection": 4,
		"paragraph": 5,
		"addpart": 0,
		"addchap": 1,
		"addsec": 2,
		"minisec": 2,
		"label": 0
	},
	// the label commands, i.e. the commands,
	// which will be shown/hidden using "Show Label" and "Hide Label"
	"toc_labels": [
		"label"
	],

	// This contains kbd-sequences to toggle settings. It is an array,
	// which consists of 2/3-tuples.
	// This first entry is the name of the settings and the second the
	// key-sequence. The third is optional and contains a description
	// of the setting. If the key-sequence consists of more than one
	// character you need to add an extra keybinding with the prefix, e.g.:
	// {
	//   "keys": ["ctrl+l","t", "a", "b", "<character>"],
	//   "command": "latextools_toggle_keys", "args": {"prefix": "ab"},
	//   "context":
	//   [
	//     {"key": "selector", "operator": "equal", "operand": "text.tex.latex"}
	//   ]
	// },
	"toggle_setting_keys": [
		["open_pdf_on_build", "v", "Open the PDF in the PDF viewer"],
		["forward_sync", "s", "Jump to the position in the PDF viewer"],
		["keep_focus", "f", "focus editor: True, focus PDF viewer: False"],
		["ref_auto_trigger", "ar"],
		["cite_auto_trigger", "ac"],
		["fill_auto_trigger", "af"],
		["env_auto_trigger", "ae"],
		["glossary_auto_trigger", "ag"],
		["tex_directive_auto_trigger", "ad"],
		["auto_label_auto_trigger", "aa"],
		["smart_bracket_auto_trigger", "ab"],
	],



// ------------------------------------------------------------------
// Smart-paste config
// ------------------------------------------------------------------

	// This is the snippet, which will be used by smart paste.
	// The strings in the array will be joined by a newline.
	// You can change it as a usual Sublime Text snippet, but need to add
	// <<image_name>> at the position where the path to the image should be
	// inserted
	"smart_paste_image_snippet": [
		"\\begin{figure}",
		"\\centering",
		"\\includegraphics[$2]{<<image_name>>}",
		"\\caption{$1}",
		"\\label{fig:${1/([0-9a-zA-Z_])|([^0-9a-zA-Z_]+)/\\L\\1(?2:_:)/g}}",
		"\\end{figure}",
	],


// ------------------------------------------------------------------
// Auto-label config
// ------------------------------------------------------------------
	// A mapping from the commands to their abbreviation, i.e. \label{abbrv:text}
	"auto_label_command_mapping": {
		"part": "part",
		"chapter": "cha",
		"section": "sec",
		"subsection": "sub",
		"subsubsection": "ssub",
		"paragraph": "par",
	},

	// A mapping from the environments to their abbreviation, i.e. \label{abbrv:text}
	// This will be used if the command is \caption{...}
	"auto_label_env_mapping": {
		"figure": "fig",
		"table": "tab",
		"listing": "lst",
		"<math>": "eq",
	},

	// A char replacement in the auto-label generation. This should contain a mapping
	// for all characters outside the range A-Z, a-z, 0-9 (and map into that range).
	// All other characters will be substituted by an underscore (_).
	"auto_label_char_replace": {
		"ü": "ue",
		"ä": "ae",
		"ö": "oe",
		"ß": "ss",
	},



// ------------------------------------------------------------------
// Opening files included into the tex source code
// ------------------------------------------------------------------
// the commands to open image files. The extensions will be matched from top to bottom.
	// If no extension is given, all extensions will be matched.
	// If there is no match the image will be opened with Sublime Text.
	// the extension:
	//		can either be a string for one extension
	//		or an array of string to match more than one extensions.
	// the command:
	//		can be the name to start the programm. The image file will be passed
	//			as the argument.
	//		can be a string as a command with args:
	//			e.g. "open -a PixelMator", in this case the file will be appended
	//			if the position is relevant use "$file" in the string
	//			e.g. "open -a PixelMator $file"
	//			this will be substituted by the path to the file
	"open_image_command": {
		"osx" : [
			{
				// open pdf and eps documents with skim
				"extension": ["pdf", "eps"],
				"command": "open -a Skim.app"
			}
			// uncomment these lines to open all other images with the default programm
			// ,
			// {
			// 	"command": "open"
			// }
		],

		// You might want to use "start" for the default programm used by Windows.
		"windows": [
			{
				// open pdf and eps documents with sumatra (it has to be on your PATH)
				"extension": ["pdf", "eps"],
				"command": "SumatraPDF"
			}
			// uncomment these lines to open all other images with the default program
			// ,
			// {
			// 	"command": "start"
			// }
		],

		"linux": [
			{
				// open pdf documents with evince
				"extension": "pdf",
				"command": "evince"
			}
			// uncomment these lines to open all other images with the default programm
			// ,
			// {
			// 	"command": "xdg-open"
			// }
		]
	},


// ------------------------------------------------------------------
// Math Preview
// ------------------------------------------------------------------
	// It is recommended to use the "preview_math_template_packages" and
	// "preview_math_template_preamble" setting to define your template file.
	// However if you don't like this you can also also set the absolute path to
	// your own compile template in this setting.
	// INSTEAD of using the default template and inject the packages and preamble
	// you can also define a path to your own template. This must be an absolute
	// path and the template MUST NOT INCLUDE OTHER FILES.
	// The file should should contain a field <<content>>, which will be substituted
	// by the compilation content.
	// If you want to have colorful equations you should use the package xcolor and
	// add the field <<set_color>> at the begin of the document (above <<content>>).
	"preview_math_template_file": null,

	// The maximal number of thread used to convert images for the math live preview
	// and the image preview (which requires this to convert pdf files to png thumbnails).
	// Decrease this number if you are running in performance issues while editing math
	// or viewing images.
	// This must be greater than 0.
	"preview_max_convert_threads": 2,

	// Setting for the temporary folder, which hold the preview images.
	// For performance reasons the images are cached and not directly deleted.
	// The max size of the image and math preview folders in MB. If the folders
	// exceed the size images will be deleted until the folders are 10% of that size.
	"preview_math_temp_size": 50,
	"preview_image_temp_size": 30,

	// The duration in which this exceeding will be checked in hours.
	// Use -1 to not automatically delete the files.
	"preview_temp_delete_period": 24,

	// --- Settings for Ghostscript conversion to PNG ---
	// The density of the preview image. The higher the density the larger the phantom.
	"preview_math_density": 150,
	// If the image is not sharp enough increase this scale to get a better resolution.
	// However also change the density by the same factor to keep the size the
	// same.
	"preview_math_scale_quotient": 1,
	// If this is true, the image will be rendered at a higher resolution and
	// then scaled down. This generally results in a clearer image.
	"preview_math_hires": true,

	// These settings control the amount of memory used by Ghostscript
	// when converting a PDF to PNG. You may want to adjust them if you
	// use complex equations. The defaults for both of these values are the
	// Ghostscript defaults.
	// 
	// Controls the maximum size of the image stored in memory
	"preview_math_max_bitmap": 1000000,
	// Controls the maximum buffer space for images that do not fit
	// in the `preview_math_max_bitmap` space
	"preview_math_bufferspace": 4000000,


// ------------------------------------------------------------------
// Additional fill all helper settings (for experts)
// ------------------------------------------------------------------
	// entries for the fill all helper
	// each entry can have the following keys:
	// regex: the regex before the opening bracket in reversed order,
	//		i.e. `tupni\\` instead of `\input`
	// extensions: a list of the possible file extensions,
	//		the completion will search for files with this extension
	// strip_extensions (optional, []): a list of the part of extensions, which
	//		should be stripped of.
	// comma_separated (optional, false): whether the command can contain several
	//		comma separated entries. If it is true, it will be triggered and complete
	//		after commas (,)
	"fillall_helper_entries": [
		{
			// subfile
			"regex": "elifbus\\\\",
			"extensions": ["tex"],
			"strip_extensions": [".tex"]
		},
		{
			// includesvg
			"regex": "(?:\\][^{}\\[\\]]*\\[)?gvsedulcni\\\\",
			"extensions": ["svg"],
			"strip_extensions": [".svg"]
		},
		{
			// lstinput
			"regex": "(?:\\][^{}\\[\\]]*\\[)?tupnitsl\\\\",
			"extensions": ["c", "cpp", "hs", "html", "php", "pl", "py", "sh", "xml"]
		},
		{
			// inputminted for python files
			"regex": "\\}yp\\{detnimtupni\\\\",
			"extensions": ["py"]
		},
		{
			// inputminted for general files
			"regex": "\\}\\w+\\{detnimtupni\\\\",
			"extensions": ["c", "cpp", "hs", "html", "php", "pl", "py", "sh", "xml"]
		}
	],

	// these entries should only be used for project settings or
	// while you want to test new entries
	"dynamic_fillall_helper_entries": [],

	// this determines whether or not the smart bracket autotriggering
	// will scan the full document or only a pre-configured number of lines
	// enabling full document scan will likely be more accurate for straight-
	// forward LaTeX documents, since it counts the number of open and closed
	// brackets, but in some circumstances, will yield undesirable results
	"smart_bracket_scan_full_document": false,

	// this setting determines the number of lines that smart bracket
	// auto triggering will look around each selection. by default, smart
	// bracket auto triggering looks 5 lines before the selection and 5 lines
	// after
	"smart_bracket_look_around": 5
}
