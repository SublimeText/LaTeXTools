%YAML 1.2
---
name: LaTeXTools Log
scope: text.log.latex
version: 2

first_line_match: '^This is (?:LuaHB|pdfe?|Xe)?TeXk?, Version '

variables:
  # note: assume sane path names
  file_path: '[\w\\/.-]+{{file_break}}'
  file_name: '[\w.-]+{{file_ext}}{{file_break}}'
  file_ext: '\.[a-zA-Z][a-zA-Z0-9]{1,6}'
  file_break: (?:\n|(?=\s*[()]))

################################################################################

contexts:
  main:
    - include: comments
    - include: constants
    - include: blocks
    - include: brackets
    - include: parens
    - include: log-entries
    - include: commands
    - include: strings

  comments:
    # note: primarily used for syntax_test files
    - match: \#
      scope: punctuation.definition.comment.log
      push: comment-body

  comment-body:
    - meta_scope: comment.line.log
    - match: $\n?
      pop: 1

###[ BLOCKS ]##################################################################

  blocks:
    # unquoted file-name without path information
    - match: (\()({{file_name}})
      captures:
        1: punctuation.section.block.begin.log
        2: entity.name.section.filename.log
      push: block-body
    # quoted path or filename
    - match: (\()(")
      captures:
        1: punctuation.section.block.begin.log
        2: entity.name.section.filename.log punctuation.definition.entity.begin.log
      push:
        - block-body
        - block-quoted-path
    # unquoted path
    - match: (\()((?:/?[a-zA-Z]:|\.\.?|~|[\w.-]+)?[\\/]{{file_path}})
      captures:
        1: punctuation.section.block.begin.log
        2: entity.name.section.filename.log
      push:
        - block-body
        - block-unquoted-path

  block-quoted-path:
    - meta_content_scope: entity.name.section.filename.log
    - match: \"
      scope: entity.name.section.filename.log punctuation.definition.entity.end.log
      pop: 1

  block-unquoted-path:
    # filename continuation
    - match: ^{{file_path}}
      scope: entity.name.section.filename.log
    # begin of normal block body
    - match: ^|(?=\S)
      pop: 1

  block-body:
    - meta_scope: meta.block.log
    - match: \)
      scope: punctuation.section.block.end.log
      set: blocks-only
    - include: main

  blocks-only:
    - include: blocks
    - match: ^|(?=\S)
      pop: 1

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.log
      push: bracket-body

  bracket-body:
    - meta_scope: meta.brackets.log
    - match: \]
      scope: punctuation.section.brackets.end.log
      pop: 1
    - include: comments
    - include: constants
    - include: brackets
    - include: parens
    - include: commands
    - include: strings

  parens:
    - match: \(
      scope: punctuation.section.parens.begin.log
      push: paren-body

  paren-body:
    - meta_scope: meta.parens.log
    - match: \)
      scope: punctuation.section.parens.end.log
      pop: 1
    - include: comments
    - include: constants
    - include: brackets
    - include: parens
    - include: log-entries
    - include: commands
    - include: strings

###[ LOG ENTRIES ]##############################################################

  log-entries:
    # multi-line meta information, starting with exactly 79 chars
    - match: ^(?:Dictionary:.{68}|Document Class:.{64}|File:.{74}|Language:.{70}|Package:.{71})\n
      push: block-comment-body
    # single-line meta information
    - match: ^(?:Dictionary|Document Class|File|Language|Package):.+
      scope: comment.line.log
    # errors
    - match: '^[^:]*Error:'
      scope: markup.error.log
    - match: '^!.*'
      scope: markup.error.log
    # warnings
    - match: '^[^:]*(?:Overfull|Underfull)'
      scope: markup.warning.log
      embed: box-warning-content
      escape: \[\]$
      escape_captures:
        0: meta.warning.box.log punctuation.terminator.log
    - match: '^[^:]*(FiXme|Warning):'
      scope: markup.warning.log
    - match: '^[^:]*:\d*:.*'
      scope: markup.warning.log
    # info
    - match: '^[^:]*Info:'
      scope: markup.info.log

  block-comment-body:
    - meta_scope: comment.line.log
    - match: ^.{79}\n  # consume anything which has 79 chars
    - match: \n
      pop: 1

  box-warning-content:
    - meta_scope: meta.warning.box.log
    - include: comments
    - include: constants
    - include: brackets
    - include: parens
    - include: commands
    - include: strings

  commands:
    - match: (\\)[\w@]+
      scope: support.function.latex
      captures:
        1: punctuation.definition.variable.latex
      push: cmd-args
    - match: :?=
      scope: keyword.operator.assignment.latex
      push: value
    - match: ;
      scope: punctuation.separator.latex

  cmd-args:
    - meta_scope: meta.function-call.latex
    - include: brackets
    - include: parens
    - match: \{
      scope: punctuation.section.braces.begin.log
      push: cmd-args-body
    - match: ''
      pop: 1

  cmd-args-body:
    - meta_scope: meta.braces.log
    - match: \}
      scope: punctuation.section.braces.end.log
      pop: 1
    - include: comments
    - include: constants
    - include: brackets
    - include: parens
    - include: commands
    - include: strings

  value:
    - include: parens
    - match: $|(?=\S)
      pop: 1

###[ STRINGS ]##################################################################

  constants:
    # copyright sign
    - match: \(C\)

  strings:
    - match: '{'
      scope: punctuation.definition.string.begin.log
      push: brace-quoted-string-body
    - match: '<<'
      scope: punctuation.definition.string.begin.log
      push: double-angled-string-body
    - match: '<'
      scope: punctuation.definition.string.begin.log
      push: single-angled-string-body
    - match: '``'
      scope: punctuation.definition.string.begin.log
      push: double-quoted-string-body
    - match: '`'
      scope: punctuation.definition.string.begin.log
      push: single-quoted-string-body
    # escaped characters
    - match: \\.

  brace-quoted-string-body:
    - meta_scope: string.quoted.other.log
    - match: '}'
      scope: punctuation.definition.string.end.log
      pop: 1

  double-angled-string-body:
    - meta_scope: string.quoted.other.log
    - match: '>>'
      scope: punctuation.definition.string.end.log
      pop: 1

  single-angled-string-body:
    - meta_scope: string.quoted.other.log
    - match: '>'
      scope: punctuation.definition.string.end.log
      pop: 1

  double-quoted-string-body:
    - meta_scope: string.quoted.double.log
    - match: ''''''
      scope: punctuation.definition.string.end.log
      pop: 1
    - match: \.$
      scope: punctuation.definition.string.end.log
      pop: 1

  single-quoted-string-body:
    - meta_scope: string.quoted.single.log
    - match: ''''
      scope: punctuation.definition.string.end.log
      pop: 1
    - match: \.$
      scope: punctuation.definition.string.end.log
      pop: 1
