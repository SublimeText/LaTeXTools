from pybtex.bibtex.interpreter import (
    Integer, String, QuotedVar, Identifier, FunctionLiteral,
)
bst = [['ENTRY',
  [Identifier('address'),
   Identifier('author'),
   Identifier('booktitle'),
   Identifier('chapter'),
   Identifier('edition'),
   Identifier('editor'),
   Identifier('howpublished'),
   Identifier('institution'),
   Identifier('journal'),
   Identifier('key'),
   Identifier('month'),
   Identifier('note'),
   Identifier('number'),
   Identifier('organization'),
   Identifier('pages'),
   Identifier('publisher'),
   Identifier('school'),
   Identifier('series'),
   Identifier('title'),
   Identifier('type'),
   Identifier('volume'),
   Identifier('year')],
  [],
  [Identifier('label')]],
 ['INTEGERS',
  [Identifier('output.state'),
   Identifier('before.all'),
   Identifier('mid.sentence'),
   Identifier('after.sentence'),
   Identifier('after.block')]],
 ['FUNCTION',
  [Identifier('init.state.consts')],
  [Integer(0),
   QuotedVar('before.all'),
   Identifier(':='),
   Integer(1),
   QuotedVar('mid.sentence'),
   Identifier(':='),
   Integer(2),
   QuotedVar('after.sentence'),
   Identifier(':='),
   Integer(3),
   QuotedVar('after.block'),
   Identifier(':=')]],
 ['STRINGS', [Identifier('s'), Identifier('t')]],
 ['FUNCTION',
  [Identifier('output.nonnull')],
  [QuotedVar('s'),
   Identifier(':='),
   Identifier('output.state'),
   Identifier('mid.sentence'),
   Identifier('='),
   FunctionLiteral([String(', '), Identifier('*'), Identifier('write$')]),
   FunctionLiteral([Identifier('output.state'), Identifier('after.block'), Identifier('='), FunctionLiteral([Identifier('add.period$'), Identifier('write$'), Identifier('newline$'), String('\\newblock '), Identifier('write$')]), FunctionLiteral([Identifier('output.state'), Identifier('before.all'), Identifier('='), QuotedVar('write$'), FunctionLiteral([Identifier('add.period$'), String(' '), Identifier('*'), Identifier('write$')]), Identifier('if$')]), Identifier('if$'), Identifier('mid.sentence'), QuotedVar('output.state'), Identifier(':=')]),
   Identifier('if$'),
   Identifier('s')]],
 ['FUNCTION',
  [Identifier('output')],
  [Identifier('duplicate$'),
   Identifier('empty$'),
   QuotedVar('pop$'),
   QuotedVar('output.nonnull'),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('output.check')],
  [QuotedVar('t'),
   Identifier(':='),
   Identifier('duplicate$'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('pop$'), String('empty '), Identifier('t'), Identifier('*'), String(' in '), Identifier('*'), Identifier('cite$'), Identifier('*'), Identifier('warning$')]),
   QuotedVar('output.nonnull'),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('output.bibitem')],
  [Identifier('newline$'),
   String('\\bibitem{'),
   Identifier('write$'),
   Identifier('cite$'),
   Identifier('write$'),
   String('}'),
   Identifier('write$'),
   Identifier('newline$'),
   String(''),
   Identifier('before.all'),
   QuotedVar('output.state'),
   Identifier(':=')]],
 ['FUNCTION',
  [Identifier('fin.entry')],
  [Identifier('add.period$'),
   Identifier('write$'),
   Identifier('newline$')]],
 ['FUNCTION',
  [Identifier('new.block')],
  [Identifier('output.state'),
   Identifier('before.all'),
   Identifier('='),
   QuotedVar('skip$'),
   FunctionLiteral([Identifier('after.block'), QuotedVar('output.state'), Identifier(':=')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('new.sentence')],
  [Identifier('output.state'),
   Identifier('after.block'),
   Identifier('='),
   QuotedVar('skip$'),
   FunctionLiteral([Identifier('output.state'), Identifier('before.all'), Identifier('='), QuotedVar('skip$'), FunctionLiteral([Identifier('after.sentence'), QuotedVar('output.state'), Identifier(':=')]), Identifier('if$')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('not')],
  [FunctionLiteral([Integer(0)]),
   FunctionLiteral([Integer(1)]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('and')],
  [QuotedVar('skip$'),
   FunctionLiteral([Identifier('pop$'), Integer(0)]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('or')],
  [FunctionLiteral([Identifier('pop$'), Integer(1)]),
   QuotedVar('skip$'),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('new.block.checka')],
  [Identifier('empty$'),
   QuotedVar('skip$'),
   QuotedVar('new.block'),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('new.block.checkb')],
  [Identifier('empty$'),
   Identifier('swap$'),
   Identifier('empty$'),
   Identifier('and'),
   QuotedVar('skip$'),
   QuotedVar('new.block'),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('new.sentence.checka')],
  [Identifier('empty$'),
   QuotedVar('skip$'),
   QuotedVar('new.sentence'),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('new.sentence.checkb')],
  [Identifier('empty$'),
   Identifier('swap$'),
   Identifier('empty$'),
   Identifier('and'),
   QuotedVar('skip$'),
   QuotedVar('new.sentence'),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('field.or.null')],
  [Identifier('duplicate$'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('pop$'), String('')]),
   QuotedVar('skip$'),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('emphasize')],
  [Identifier('duplicate$'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('pop$'), String('')]),
   FunctionLiteral([String('{\\em '), Identifier('swap$'), Identifier('*'), String('}'), Identifier('*')]),
   Identifier('if$')]],
 ['INTEGERS',
  [Identifier('nameptr'), Identifier('namesleft'), Identifier('numnames')]],
 ['FUNCTION',
  [Identifier('format.names')],
  [QuotedVar('s'),
   Identifier(':='),
   Integer(1),
   QuotedVar('nameptr'),
   Identifier(':='),
   Identifier('s'),
   Identifier('num.names$'),
   QuotedVar('numnames'),
   Identifier(':='),
   Identifier('numnames'),
   QuotedVar('namesleft'),
   Identifier(':='),
   FunctionLiteral([Identifier('namesleft'), Integer(0), Identifier('>')]),
   FunctionLiteral([Identifier('s'), Identifier('nameptr'), String('{ff~}{vv~}{ll}{, jj}'), Identifier('format.name$'), QuotedVar('t'), Identifier(':='), Identifier('nameptr'), Integer(1), Identifier('>'), FunctionLiteral([Identifier('namesleft'), Integer(1), Identifier('>'), FunctionLiteral([String(', '), Identifier('*'), Identifier('t'), Identifier('*')]), FunctionLiteral([Identifier('numnames'), Integer(2), Identifier('>'), FunctionLiteral([String(','), Identifier('*')]), QuotedVar('skip$'), Identifier('if$'), Identifier('t'), String('others'), Identifier('='), FunctionLiteral([String(' et~al.'), Identifier('*')]), FunctionLiteral([String(' and '), Identifier('*'), Identifier('t'), Identifier('*')]), Identifier('if$')]), Identifier('if$')]), QuotedVar('t'), Identifier('if$'), Identifier('nameptr'), Integer(1), Identifier('+'), QuotedVar('nameptr'), Identifier(':='), Identifier('namesleft'), Integer(1), Identifier('-'), QuotedVar('namesleft'), Identifier(':=')]),
   Identifier('while$')]],
 ['FUNCTION',
  [Identifier('format.authors')],
  [Identifier('author'),
   Identifier('empty$'),
   FunctionLiteral([String('')]),
   FunctionLiteral([Identifier('author'), Identifier('format.names')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('format.editors')],
  [Identifier('editor'),
   Identifier('empty$'),
   FunctionLiteral([String('')]),
   FunctionLiteral([Identifier('editor'), Identifier('format.names'), Identifier('editor'), Identifier('num.names$'), Integer(1), Identifier('>'), FunctionLiteral([String(', editors'), Identifier('*')]), FunctionLiteral([String(', editor'), Identifier('*')]), Identifier('if$')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('format.title')],
  [Identifier('title'),
   Identifier('empty$'),
   FunctionLiteral([String('')]),
   FunctionLiteral([Identifier('title'), String('t'), Identifier('change.case$')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('n.dashify')],
  [QuotedVar('t'),
   Identifier(':='),
   String(''),
   FunctionLiteral([Identifier('t'), Identifier('empty$'), Identifier('not')]),
   FunctionLiteral([Identifier('t'), Integer(1), Integer(1), Identifier('substring$'), String('-'), Identifier('='), FunctionLiteral([Identifier('t'), Integer(1), Integer(2), Identifier('substring$'), String('--'), Identifier('='), Identifier('not'), FunctionLiteral([String('--'), Identifier('*'), Identifier('t'), Integer(2), Identifier('global.max$'), Identifier('substring$'), QuotedVar('t'), Identifier(':=')]), FunctionLiteral([FunctionLiteral([Identifier('t'), Integer(1), Integer(1), Identifier('substring$'), String('-'), Identifier('=')]), FunctionLiteral([String('-'), Identifier('*'), Identifier('t'), Integer(2), Identifier('global.max$'), Identifier('substring$'), QuotedVar('t'), Identifier(':=')]), Identifier('while$')]), Identifier('if$')]), FunctionLiteral([Identifier('t'), Integer(1), Integer(1), Identifier('substring$'), Identifier('*'), Identifier('t'), Integer(2), Identifier('global.max$'), Identifier('substring$'), QuotedVar('t'), Identifier(':=')]), Identifier('if$')]),
   Identifier('while$')]],
 ['FUNCTION',
  [Identifier('format.date')],
  [Identifier('year'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('month'), Identifier('empty$'), FunctionLiteral([String('')]), FunctionLiteral([String("there's a month but no year in "), Identifier('cite$'), Identifier('*'), Identifier('warning$'), Identifier('month')]), Identifier('if$')]),
   FunctionLiteral([Identifier('month'), Identifier('empty$'), QuotedVar('year'), FunctionLiteral([Identifier('month'), String(' '), Identifier('*'), Identifier('year'), Identifier('*')]), Identifier('if$')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('format.btitle')],
  [Identifier('title'), Identifier('emphasize')]],
 ['FUNCTION',
  [Identifier('tie.or.space.connect')],
  [Identifier('duplicate$'),
   Identifier('text.length$'),
   Integer(3),
   Identifier('<'),
   FunctionLiteral([String('~')]),
   FunctionLiteral([String(' ')]),
   Identifier('if$'),
   Identifier('swap$'),
   Identifier('*'),
   Identifier('*')]],
 ['FUNCTION',
  [Identifier('either.or.check')],
  [Identifier('empty$'),
   QuotedVar('pop$'),
   FunctionLiteral([String("can't use both "), Identifier('swap$'), Identifier('*'), String(' fields in '), Identifier('*'), Identifier('cite$'), Identifier('*'), Identifier('warning$')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('format.bvolume')],
  [Identifier('volume'),
   Identifier('empty$'),
   FunctionLiteral([String('')]),
   FunctionLiteral([String('volume'), Identifier('volume'), Identifier('tie.or.space.connect'), Identifier('series'), Identifier('empty$'), QuotedVar('skip$'), FunctionLiteral([String(' of '), Identifier('*'), Identifier('series'), Identifier('emphasize'), Identifier('*')]), Identifier('if$'), String('volume and number'), Identifier('number'), Identifier('either.or.check')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('format.number.series')],
  [Identifier('volume'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('number'), Identifier('empty$'), FunctionLiteral([Identifier('series'), Identifier('field.or.null')]), FunctionLiteral([Identifier('output.state'), Identifier('mid.sentence'), Identifier('='), FunctionLiteral([String('number')]), FunctionLiteral([String('Number')]), Identifier('if$'), Identifier('number'), Identifier('tie.or.space.connect'), Identifier('series'), Identifier('empty$'), FunctionLiteral([String("there's a number but no series in "), Identifier('cite$'), Identifier('*'), Identifier('warning$')]), FunctionLiteral([String(' in '), Identifier('*'), Identifier('series'), Identifier('*')]), Identifier('if$')]), Identifier('if$')]),
   FunctionLiteral([String('')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('format.edition')],
  [Identifier('edition'),
   Identifier('empty$'),
   FunctionLiteral([String('')]),
   FunctionLiteral([Identifier('output.state'), Identifier('mid.sentence'), Identifier('='), FunctionLiteral([Identifier('edition'), String('l'), Identifier('change.case$'), String(' edition'), Identifier('*')]), FunctionLiteral([Identifier('edition'), String('t'), Identifier('change.case$'), String(' edition'), Identifier('*')]), Identifier('if$')]),
   Identifier('if$')]],
 ['INTEGERS', [Identifier('multiresult')]],
 ['FUNCTION',
  [Identifier('multi.page.check')],
  [QuotedVar('t'),
   Identifier(':='),
   Integer(0),
   QuotedVar('multiresult'),
   Identifier(':='),
   FunctionLiteral([Identifier('multiresult'), Identifier('not'), Identifier('t'), Identifier('empty$'), Identifier('not'), Identifier('and')]),
   FunctionLiteral([Identifier('t'), Integer(1), Integer(1), Identifier('substring$'), Identifier('duplicate$'), String('-'), Identifier('='), Identifier('swap$'), Identifier('duplicate$'), String(','), Identifier('='), Identifier('swap$'), String('+'), Identifier('='), Identifier('or'), Identifier('or'), FunctionLiteral([Integer(1), QuotedVar('multiresult'), Identifier(':=')]), FunctionLiteral([Identifier('t'), Integer(2), Identifier('global.max$'), Identifier('substring$'), QuotedVar('t'), Identifier(':=')]), Identifier('if$')]),
   Identifier('while$'),
   Identifier('multiresult')]],
 ['FUNCTION',
  [Identifier('format.pages')],
  [Identifier('pages'),
   Identifier('empty$'),
   FunctionLiteral([String('')]),
   FunctionLiteral([Identifier('pages'), Identifier('multi.page.check'), FunctionLiteral([String('pages'), Identifier('pages'), Identifier('n.dashify'), Identifier('tie.or.space.connect')]), FunctionLiteral([String('page'), Identifier('pages'), Identifier('tie.or.space.connect')]), Identifier('if$')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('format.vol.num.pages')],
  [Identifier('volume'),
   Identifier('field.or.null'),
   Identifier('number'),
   Identifier('empty$'),
   QuotedVar('skip$'),
   FunctionLiteral([String('('), Identifier('number'), Identifier('*'), String(')'), Identifier('*'), Identifier('*'), Identifier('volume'), Identifier('empty$'), FunctionLiteral([String("there's a number but no volume in "), Identifier('cite$'), Identifier('*'), Identifier('warning$')]), QuotedVar('skip$'), Identifier('if$')]),
   Identifier('if$'),
   Identifier('pages'),
   Identifier('empty$'),
   QuotedVar('skip$'),
   FunctionLiteral([Identifier('duplicate$'), Identifier('empty$'), FunctionLiteral([Identifier('pop$'), Identifier('format.pages')]), FunctionLiteral([String(':'), Identifier('*'), Identifier('pages'), Identifier('n.dashify'), Identifier('*')]), Identifier('if$')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('format.chapter.pages')],
  [Identifier('chapter'),
   Identifier('empty$'),
   QuotedVar('format.pages'),
   FunctionLiteral([Identifier('type'), Identifier('empty$'), FunctionLiteral([String('chapter')]), FunctionLiteral([Identifier('type'), String('l'), Identifier('change.case$')]), Identifier('if$'), Identifier('chapter'), Identifier('tie.or.space.connect'), Identifier('pages'), Identifier('empty$'), QuotedVar('skip$'), FunctionLiteral([String(', '), Identifier('*'), Identifier('format.pages'), Identifier('*')]), Identifier('if$')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('format.in.ed.booktitle')],
  [Identifier('booktitle'),
   Identifier('empty$'),
   FunctionLiteral([String('')]),
   FunctionLiteral([Identifier('editor'), Identifier('empty$'), FunctionLiteral([String('In '), Identifier('booktitle'), Identifier('emphasize'), Identifier('*')]), FunctionLiteral([String('In '), Identifier('format.editors'), Identifier('*'), String(', '), Identifier('*'), Identifier('booktitle'), Identifier('emphasize'), Identifier('*')]), Identifier('if$')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('empty.misc.check')],
  [Identifier('author'),
   Identifier('empty$'),
   Identifier('title'),
   Identifier('empty$'),
   Identifier('howpublished'),
   Identifier('empty$'),
   Identifier('month'),
   Identifier('empty$'),
   Identifier('year'),
   Identifier('empty$'),
   Identifier('note'),
   Identifier('empty$'),
   Identifier('and'),
   Identifier('and'),
   Identifier('and'),
   Identifier('and'),
   Identifier('and'),
   Identifier('key'),
   Identifier('empty$'),
   Identifier('not'),
   Identifier('and'),
   FunctionLiteral([String('all relevant fields are empty in '), Identifier('cite$'), Identifier('*'), Identifier('warning$')]),
   QuotedVar('skip$'),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('format.thesis.type')],
  [Identifier('type'),
   Identifier('empty$'),
   QuotedVar('skip$'),
   FunctionLiteral([Identifier('pop$'), Identifier('type'), String('t'), Identifier('change.case$')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('format.tr.number')],
  [Identifier('type'),
   Identifier('empty$'),
   FunctionLiteral([String('Technical Report')]),
   QuotedVar('type'),
   Identifier('if$'),
   Identifier('number'),
   Identifier('empty$'),
   FunctionLiteral([String('t'), Identifier('change.case$')]),
   FunctionLiteral([Identifier('number'), Identifier('tie.or.space.connect')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('format.article.crossref')],
  [Identifier('key'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('journal'), Identifier('empty$'), FunctionLiteral([String('need key or journal for '), Identifier('cite$'), Identifier('*'), String(' to crossref '), Identifier('*'), Identifier('crossref'), Identifier('*'), Identifier('warning$'), String('')]), FunctionLiteral([String('In {\\em '), Identifier('journal'), Identifier('*'), String('\\/}'), Identifier('*')]), Identifier('if$')]),
   FunctionLiteral([String('In '), Identifier('key'), Identifier('*')]),
   Identifier('if$'),
   String(' \\cite{'),
   Identifier('*'),
   Identifier('crossref'),
   Identifier('*'),
   String('}'),
   Identifier('*')]],
 ['FUNCTION',
  [Identifier('format.crossref.editor')],
  [Identifier('editor'),
   Integer(1),
   String('{vv~}{ll}'),
   Identifier('format.name$'),
   Identifier('editor'),
   Identifier('num.names$'),
   Identifier('duplicate$'),
   Integer(2),
   Identifier('>'),
   FunctionLiteral([Identifier('pop$'), String(' et~al.'), Identifier('*')]),
   FunctionLiteral([Integer(2), Identifier('<'), QuotedVar('skip$'), FunctionLiteral([Identifier('editor'), Integer(2), String('{ff }{vv }{ll}{ jj}'), Identifier('format.name$'), String('others'), Identifier('='), FunctionLiteral([String(' et~al.'), Identifier('*')]), FunctionLiteral([String(' and '), Identifier('*'), Identifier('editor'), Integer(2), String('{vv~}{ll}'), Identifier('format.name$'), Identifier('*')]), Identifier('if$')]), Identifier('if$')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('format.book.crossref')],
  [Identifier('volume'),
   Identifier('empty$'),
   FunctionLiteral([String('empty volume in '), Identifier('cite$'), Identifier('*'), String("'s crossref of "), Identifier('*'), Identifier('crossref'), Identifier('*'), Identifier('warning$'), String('In ')]),
   FunctionLiteral([String('Volume'), Identifier('volume'), Identifier('tie.or.space.connect'), String(' of '), Identifier('*')]),
   Identifier('if$'),
   Identifier('editor'),
   Identifier('empty$'),
   Identifier('editor'),
   Identifier('field.or.null'),
   Identifier('author'),
   Identifier('field.or.null'),
   Identifier('='),
   Identifier('or'),
   FunctionLiteral([Identifier('key'), Identifier('empty$'), FunctionLiteral([Identifier('series'), Identifier('empty$'), FunctionLiteral([String('need editor, key, or series for '), Identifier('cite$'), Identifier('*'), String(' to crossref '), Identifier('*'), Identifier('crossref'), Identifier('*'), Identifier('warning$'), String(''), Identifier('*')]), FunctionLiteral([String('{\\em '), Identifier('*'), Identifier('series'), Identifier('*'), String('\\/}'), Identifier('*')]), Identifier('if$')]), FunctionLiteral([Identifier('key'), Identifier('*')]), Identifier('if$')]),
   FunctionLiteral([Identifier('format.crossref.editor'), Identifier('*')]),
   Identifier('if$'),
   String(' \\cite{'),
   Identifier('*'),
   Identifier('crossref'),
   Identifier('*'),
   String('}'),
   Identifier('*')]],
 ['FUNCTION',
  [Identifier('format.incoll.inproc.crossref')],
  [Identifier('editor'),
   Identifier('empty$'),
   Identifier('editor'),
   Identifier('field.or.null'),
   Identifier('author'),
   Identifier('field.or.null'),
   Identifier('='),
   Identifier('or'),
   FunctionLiteral([Identifier('key'), Identifier('empty$'), FunctionLiteral([Identifier('booktitle'), Identifier('empty$'), FunctionLiteral([String('need editor, key, or booktitle for '), Identifier('cite$'), Identifier('*'), String(' to crossref '), Identifier('*'), Identifier('crossref'), Identifier('*'), Identifier('warning$'), String('')]), FunctionLiteral([String('In {\\em '), Identifier('booktitle'), Identifier('*'), String('\\/}'), Identifier('*')]), Identifier('if$')]), FunctionLiteral([String('In '), Identifier('key'), Identifier('*')]), Identifier('if$')]),
   FunctionLiteral([String('In '), Identifier('format.crossref.editor'), Identifier('*')]),
   Identifier('if$'),
   String(' \\cite{'),
   Identifier('*'),
   Identifier('crossref'),
   Identifier('*'),
   String('}'),
   Identifier('*')]],
 ['FUNCTION',
  [Identifier('article')],
  [Identifier('output.bibitem'),
   Identifier('format.authors'),
   String('author'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('format.title'),
   String('title'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('crossref'),
   Identifier('missing$'),
   FunctionLiteral([Identifier('journal'), Identifier('emphasize'), String('journal'), Identifier('output.check'), Identifier('format.vol.num.pages'), Identifier('output'), Identifier('format.date'), String('year'), Identifier('output.check')]),
   FunctionLiteral([Identifier('format.article.crossref'), Identifier('output.nonnull'), Identifier('format.pages'), Identifier('output')]),
   Identifier('if$'),
   Identifier('new.block'),
   Identifier('note'),
   Identifier('output'),
   Identifier('fin.entry')]],
 ['FUNCTION',
  [Identifier('book')],
  [Identifier('output.bibitem'),
   Identifier('author'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('format.editors'), String('author and editor'), Identifier('output.check')]),
   FunctionLiteral([Identifier('format.authors'), Identifier('output.nonnull'), Identifier('crossref'), Identifier('missing$'), FunctionLiteral([String('author and editor'), Identifier('editor'), Identifier('either.or.check')]), QuotedVar('skip$'), Identifier('if$')]),
   Identifier('if$'),
   Identifier('new.block'),
   Identifier('format.btitle'),
   String('title'),
   Identifier('output.check'),
   Identifier('crossref'),
   Identifier('missing$'),
   FunctionLiteral([Identifier('format.bvolume'), Identifier('output'), Identifier('new.block'), Identifier('format.number.series'), Identifier('output'), Identifier('new.sentence'), Identifier('publisher'), String('publisher'), Identifier('output.check'), Identifier('address'), Identifier('output')]),
   FunctionLiteral([Identifier('new.block'), Identifier('format.book.crossref'), Identifier('output.nonnull')]),
   Identifier('if$'),
   Identifier('format.edition'),
   Identifier('output'),
   Identifier('format.date'),
   String('year'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('note'),
   Identifier('output'),
   Identifier('fin.entry')]],
 ['FUNCTION',
  [Identifier('booklet')],
  [Identifier('output.bibitem'),
   Identifier('format.authors'),
   Identifier('output'),
   Identifier('new.block'),
   Identifier('format.title'),
   String('title'),
   Identifier('output.check'),
   Identifier('howpublished'),
   Identifier('address'),
   Identifier('new.block.checkb'),
   Identifier('howpublished'),
   Identifier('output'),
   Identifier('address'),
   Identifier('output'),
   Identifier('format.date'),
   Identifier('output'),
   Identifier('new.block'),
   Identifier('note'),
   Identifier('output'),
   Identifier('fin.entry')]],
 ['FUNCTION',
  [Identifier('inbook')],
  [Identifier('output.bibitem'),
   Identifier('author'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('format.editors'), String('author and editor'), Identifier('output.check')]),
   FunctionLiteral([Identifier('format.authors'), Identifier('output.nonnull'), Identifier('crossref'), Identifier('missing$'), FunctionLiteral([String('author and editor'), Identifier('editor'), Identifier('either.or.check')]), QuotedVar('skip$'), Identifier('if$')]),
   Identifier('if$'),
   Identifier('new.block'),
   Identifier('format.btitle'),
   String('title'),
   Identifier('output.check'),
   Identifier('crossref'),
   Identifier('missing$'),
   FunctionLiteral([Identifier('format.bvolume'), Identifier('output'), Identifier('format.chapter.pages'), String('chapter and pages'), Identifier('output.check'), Identifier('new.block'), Identifier('format.number.series'), Identifier('output'), Identifier('new.sentence'), Identifier('publisher'), String('publisher'), Identifier('output.check'), Identifier('address'), Identifier('output')]),
   FunctionLiteral([Identifier('format.chapter.pages'), String('chapter and pages'), Identifier('output.check'), Identifier('new.block'), Identifier('format.book.crossref'), Identifier('output.nonnull')]),
   Identifier('if$'),
   Identifier('format.edition'),
   Identifier('output'),
   Identifier('format.date'),
   String('year'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('note'),
   Identifier('output'),
   Identifier('fin.entry')]],
 ['FUNCTION',
  [Identifier('incollection')],
  [Identifier('output.bibitem'),
   Identifier('format.authors'),
   String('author'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('format.title'),
   String('title'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('crossref'),
   Identifier('missing$'),
   FunctionLiteral([Identifier('format.in.ed.booktitle'), String('booktitle'), Identifier('output.check'), Identifier('format.bvolume'), Identifier('output'), Identifier('format.number.series'), Identifier('output'), Identifier('format.chapter.pages'), Identifier('output'), Identifier('new.sentence'), Identifier('publisher'), String('publisher'), Identifier('output.check'), Identifier('address'), Identifier('output'), Identifier('format.edition'), Identifier('output'), Identifier('format.date'), String('year'), Identifier('output.check')]),
   FunctionLiteral([Identifier('format.incoll.inproc.crossref'), Identifier('output.nonnull'), Identifier('format.chapter.pages'), Identifier('output')]),
   Identifier('if$'),
   Identifier('new.block'),
   Identifier('note'),
   Identifier('output'),
   Identifier('fin.entry')]],
 ['FUNCTION',
  [Identifier('inproceedings')],
  [Identifier('output.bibitem'),
   Identifier('format.authors'),
   String('author'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('format.title'),
   String('title'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('crossref'),
   Identifier('missing$'),
   FunctionLiteral([Identifier('format.in.ed.booktitle'), String('booktitle'), Identifier('output.check'), Identifier('format.bvolume'), Identifier('output'), Identifier('format.number.series'), Identifier('output'), Identifier('format.pages'), Identifier('output'), Identifier('address'), Identifier('empty$'), FunctionLiteral([Identifier('organization'), Identifier('publisher'), Identifier('new.sentence.checkb'), Identifier('organization'), Identifier('output'), Identifier('publisher'), Identifier('output'), Identifier('format.date'), String('year'), Identifier('output.check')]), FunctionLiteral([Identifier('address'), Identifier('output.nonnull'), Identifier('format.date'), String('year'), Identifier('output.check'), Identifier('new.sentence'), Identifier('organization'), Identifier('output'), Identifier('publisher'), Identifier('output')]), Identifier('if$')]),
   FunctionLiteral([Identifier('format.incoll.inproc.crossref'), Identifier('output.nonnull'), Identifier('format.pages'), Identifier('output')]),
   Identifier('if$'),
   Identifier('new.block'),
   Identifier('note'),
   Identifier('output'),
   Identifier('fin.entry')]],
 ['FUNCTION', [Identifier('conference')], [Identifier('inproceedings')]],
 ['FUNCTION',
  [Identifier('manual')],
  [Identifier('output.bibitem'),
   Identifier('author'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('organization'), Identifier('empty$'), QuotedVar('skip$'), FunctionLiteral([Identifier('organization'), Identifier('output.nonnull'), Identifier('address'), Identifier('output')]), Identifier('if$')]),
   FunctionLiteral([Identifier('format.authors'), Identifier('output.nonnull')]),
   Identifier('if$'),
   Identifier('new.block'),
   Identifier('format.btitle'),
   String('title'),
   Identifier('output.check'),
   Identifier('author'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('organization'), Identifier('empty$'), FunctionLiteral([Identifier('address'), Identifier('new.block.checka'), Identifier('address'), Identifier('output')]), QuotedVar('skip$'), Identifier('if$')]),
   FunctionLiteral([Identifier('organization'), Identifier('address'), Identifier('new.block.checkb'), Identifier('organization'), Identifier('output'), Identifier('address'), Identifier('output')]),
   Identifier('if$'),
   Identifier('format.edition'),
   Identifier('output'),
   Identifier('format.date'),
   Identifier('output'),
   Identifier('new.block'),
   Identifier('note'),
   Identifier('output'),
   Identifier('fin.entry')]],
 ['FUNCTION',
  [Identifier('mastersthesis')],
  [Identifier('output.bibitem'),
   Identifier('format.authors'),
   String('author'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('format.title'),
   String('title'),
   Identifier('output.check'),
   Identifier('new.block'),
   String("Master's thesis"),
   Identifier('format.thesis.type'),
   Identifier('output.nonnull'),
   Identifier('school'),
   String('school'),
   Identifier('output.check'),
   Identifier('address'),
   Identifier('output'),
   Identifier('format.date'),
   String('year'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('note'),
   Identifier('output'),
   Identifier('fin.entry')]],
 ['FUNCTION',
  [Identifier('misc')],
  [Identifier('output.bibitem'),
   Identifier('format.authors'),
   Identifier('output'),
   Identifier('title'),
   Identifier('howpublished'),
   Identifier('new.block.checkb'),
   Identifier('format.title'),
   Identifier('output'),
   Identifier('howpublished'),
   Identifier('new.block.checka'),
   Identifier('howpublished'),
   Identifier('output'),
   Identifier('format.date'),
   Identifier('output'),
   Identifier('new.block'),
   Identifier('note'),
   Identifier('output'),
   Identifier('fin.entry'),
   Identifier('empty.misc.check')]],
 ['FUNCTION',
  [Identifier('phdthesis')],
  [Identifier('output.bibitem'),
   Identifier('format.authors'),
   String('author'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('format.btitle'),
   String('title'),
   Identifier('output.check'),
   Identifier('new.block'),
   String('PhD thesis'),
   Identifier('format.thesis.type'),
   Identifier('output.nonnull'),
   Identifier('school'),
   String('school'),
   Identifier('output.check'),
   Identifier('address'),
   Identifier('output'),
   Identifier('format.date'),
   String('year'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('note'),
   Identifier('output'),
   Identifier('fin.entry')]],
 ['FUNCTION',
  [Identifier('proceedings')],
  [Identifier('output.bibitem'),
   Identifier('editor'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('organization'), Identifier('output')]),
   FunctionLiteral([Identifier('format.editors'), Identifier('output.nonnull')]),
   Identifier('if$'),
   Identifier('new.block'),
   Identifier('format.btitle'),
   String('title'),
   Identifier('output.check'),
   Identifier('format.bvolume'),
   Identifier('output'),
   Identifier('format.number.series'),
   Identifier('output'),
   Identifier('address'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('editor'), Identifier('empty$'), FunctionLiteral([Identifier('publisher'), Identifier('new.sentence.checka')]), FunctionLiteral([Identifier('organization'), Identifier('publisher'), Identifier('new.sentence.checkb'), Identifier('organization'), Identifier('output')]), Identifier('if$'), Identifier('publisher'), Identifier('output'), Identifier('format.date'), String('year'), Identifier('output.check')]),
   FunctionLiteral([Identifier('address'), Identifier('output.nonnull'), Identifier('format.date'), String('year'), Identifier('output.check'), Identifier('new.sentence'), Identifier('editor'), Identifier('empty$'), QuotedVar('skip$'), FunctionLiteral([Identifier('organization'), Identifier('output')]), Identifier('if$'), Identifier('publisher'), Identifier('output')]),
   Identifier('if$'),
   Identifier('new.block'),
   Identifier('note'),
   Identifier('output'),
   Identifier('fin.entry')]],
 ['FUNCTION',
  [Identifier('techreport')],
  [Identifier('output.bibitem'),
   Identifier('format.authors'),
   String('author'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('format.title'),
   String('title'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('format.tr.number'),
   Identifier('output.nonnull'),
   Identifier('institution'),
   String('institution'),
   Identifier('output.check'),
   Identifier('address'),
   Identifier('output'),
   Identifier('format.date'),
   String('year'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('note'),
   Identifier('output'),
   Identifier('fin.entry')]],
 ['FUNCTION',
  [Identifier('unpublished')],
  [Identifier('output.bibitem'),
   Identifier('format.authors'),
   String('author'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('format.title'),
   String('title'),
   Identifier('output.check'),
   Identifier('new.block'),
   Identifier('note'),
   String('note'),
   Identifier('output.check'),
   Identifier('format.date'),
   Identifier('output'),
   Identifier('fin.entry')]],
 ['FUNCTION', [Identifier('default.type')], [Identifier('misc')]],
 ['MACRO', [Identifier('jan')], [String('January')]],
 ['MACRO', [Identifier('feb')], [String('February')]],
 ['MACRO', [Identifier('mar')], [String('March')]],
 ['MACRO', [Identifier('apr')], [String('April')]],
 ['MACRO', [Identifier('may')], [String('May')]],
 ['MACRO', [Identifier('jun')], [String('June')]],
 ['MACRO', [Identifier('jul')], [String('July')]],
 ['MACRO', [Identifier('aug')], [String('August')]],
 ['MACRO', [Identifier('sep')], [String('September')]],
 ['MACRO', [Identifier('oct')], [String('October')]],
 ['MACRO', [Identifier('nov')], [String('November')]],
 ['MACRO', [Identifier('dec')], [String('December')]],
 ['MACRO', [Identifier('acmcs')], [String('ACM Computing Surveys')]],
 ['MACRO', [Identifier('acta')], [String('Acta Informatica')]],
 ['MACRO', [Identifier('cacm')], [String('Communications of the ACM')]],
 ['MACRO',
  [Identifier('ibmjrd')],
  [String('IBM Journal of Research and Development')]],
 ['MACRO', [Identifier('ibmsj')], [String('IBM Systems Journal')]],
 ['MACRO',
  [Identifier('ieeese')],
  [String('IEEE Transactions on Software Engineering')]],
 ['MACRO',
  [Identifier('ieeetc')],
  [String('IEEE Transactions on Computers')]],
 ['MACRO',
  [Identifier('ieeetcad')],
  [String('IEEE Transactions on Computer-Aided Design of Integrated Circuits')]],
 ['MACRO', [Identifier('ipl')], [String('Information Processing Letters')]],
 ['MACRO', [Identifier('jacm')], [String('Journal of the ACM')]],
 ['MACRO',
  [Identifier('jcss')],
  [String('Journal of Computer and System Sciences')]],
 ['MACRO',
  [Identifier('scp')],
  [String('Science of Computer Programming')]],
 ['MACRO', [Identifier('sicomp')], [String('SIAM Journal on Computing')]],
 ['MACRO',
  [Identifier('tocs')],
  [String('ACM Transactions on Computer Systems')]],
 ['MACRO',
  [Identifier('tods')],
  [String('ACM Transactions on Database Systems')]],
 ['MACRO', [Identifier('tog')], [String('ACM Transactions on Graphics')]],
 ['MACRO',
  [Identifier('toms')],
  [String('ACM Transactions on Mathematical Software')]],
 ['MACRO',
  [Identifier('toois')],
  [String('ACM Transactions on Office Information Systems')]],
 ['MACRO',
  [Identifier('toplas')],
  [String('ACM Transactions on Programming Languages and Systems')]],
 ['MACRO', [Identifier('tcs')], [String('Theoretical Computer Science')]],
 ['READ'],
 ['FUNCTION',
  [Identifier('sortify')],
  [Identifier('purify$'), String('l'), Identifier('change.case$')]],
 ['INTEGERS', [Identifier('len')]],
 ['FUNCTION',
  [Identifier('chop.word')],
  [QuotedVar('s'),
   Identifier(':='),
   QuotedVar('len'),
   Identifier(':='),
   Identifier('s'),
   Integer(1),
   Identifier('len'),
   Identifier('substring$'),
   Identifier('='),
   FunctionLiteral([Identifier('s'), Identifier('len'), Integer(1), Identifier('+'), Identifier('global.max$'), Identifier('substring$')]),
   QuotedVar('s'),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('sort.format.names')],
  [QuotedVar('s'),
   Identifier(':='),
   Integer(1),
   QuotedVar('nameptr'),
   Identifier(':='),
   String(''),
   Identifier('s'),
   Identifier('num.names$'),
   QuotedVar('numnames'),
   Identifier(':='),
   Identifier('numnames'),
   QuotedVar('namesleft'),
   Identifier(':='),
   FunctionLiteral([Identifier('namesleft'), Integer(0), Identifier('>')]),
   FunctionLiteral([Identifier('nameptr'), Integer(1), Identifier('>'), FunctionLiteral([String('   '), Identifier('*')]), QuotedVar('skip$'), Identifier('if$'), Identifier('s'), Identifier('nameptr'), String('{vv{ } }{ll{ }}{  ff{ }}{  jj{ }}'), Identifier('format.name$'), QuotedVar('t'), Identifier(':='), Identifier('nameptr'), Identifier('numnames'), Identifier('='), Identifier('t'), String('others'), Identifier('='), Identifier('and'), FunctionLiteral([String('et al'), Identifier('*')]), FunctionLiteral([Identifier('t'), Identifier('sortify'), Identifier('*')]), Identifier('if$'), Identifier('nameptr'), Integer(1), Identifier('+'), QuotedVar('nameptr'), Identifier(':='), Identifier('namesleft'), Integer(1), Identifier('-'), QuotedVar('namesleft'), Identifier(':=')]),
   Identifier('while$')]],
 ['FUNCTION',
  [Identifier('sort.format.title')],
  [QuotedVar('t'),
   Identifier(':='),
   String('A '),
   Integer(2),
   String('An '),
   Integer(3),
   String('The '),
   Integer(4),
   Identifier('t'),
   Identifier('chop.word'),
   Identifier('chop.word'),
   Identifier('chop.word'),
   Identifier('sortify'),
   Integer(1),
   Identifier('global.max$'),
   Identifier('substring$')]],
 ['FUNCTION',
  [Identifier('author.sort')],
  [Identifier('author'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('key'), Identifier('empty$'), FunctionLiteral([String('to sort, need author or key in '), Identifier('cite$'), Identifier('*'), Identifier('warning$'), String('')]), FunctionLiteral([Identifier('key'), Identifier('sortify')]), Identifier('if$')]),
   FunctionLiteral([Identifier('author'), Identifier('sort.format.names')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('author.editor.sort')],
  [Identifier('author'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('editor'), Identifier('empty$'), FunctionLiteral([Identifier('key'), Identifier('empty$'), FunctionLiteral([String('to sort, need author, editor, or key in '), Identifier('cite$'), Identifier('*'), Identifier('warning$'), String('')]), FunctionLiteral([Identifier('key'), Identifier('sortify')]), Identifier('if$')]), FunctionLiteral([Identifier('editor'), Identifier('sort.format.names')]), Identifier('if$')]),
   FunctionLiteral([Identifier('author'), Identifier('sort.format.names')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('author.organization.sort')],
  [Identifier('author'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('organization'), Identifier('empty$'), FunctionLiteral([Identifier('key'), Identifier('empty$'), FunctionLiteral([String('to sort, need author, organization, or key in '), Identifier('cite$'), Identifier('*'), Identifier('warning$'), String('')]), FunctionLiteral([Identifier('key'), Identifier('sortify')]), Identifier('if$')]), FunctionLiteral([String('The '), Integer(4), Identifier('organization'), Identifier('chop.word'), Identifier('sortify')]), Identifier('if$')]),
   FunctionLiteral([Identifier('author'), Identifier('sort.format.names')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('editor.organization.sort')],
  [Identifier('editor'),
   Identifier('empty$'),
   FunctionLiteral([Identifier('organization'), Identifier('empty$'), FunctionLiteral([Identifier('key'), Identifier('empty$'), FunctionLiteral([String('to sort, need editor, organization, or key in '), Identifier('cite$'), Identifier('*'), Identifier('warning$'), String('')]), FunctionLiteral([Identifier('key'), Identifier('sortify')]), Identifier('if$')]), FunctionLiteral([String('The '), Integer(4), Identifier('organization'), Identifier('chop.word'), Identifier('sortify')]), Identifier('if$')]),
   FunctionLiteral([Identifier('editor'), Identifier('sort.format.names')]),
   Identifier('if$')]],
 ['FUNCTION',
  [Identifier('presort')],
  [Identifier('type$'),
   String('book'),
   Identifier('='),
   Identifier('type$'),
   String('inbook'),
   Identifier('='),
   Identifier('or'),
   QuotedVar('author.editor.sort'),
   FunctionLiteral([Identifier('type$'), String('proceedings'), Identifier('='), QuotedVar('editor.organization.sort'), FunctionLiteral([Identifier('type$'), String('manual'), Identifier('='), QuotedVar('author.organization.sort'), QuotedVar('author.sort'), Identifier('if$')]), Identifier('if$')]),
   Identifier('if$'),
   String('    '),
   Identifier('*'),
   Identifier('year'),
   Identifier('field.or.null'),
   Identifier('sortify'),
   Identifier('*'),
   String('    '),
   Identifier('*'),
   Identifier('title'),
   Identifier('field.or.null'),
   Identifier('sort.format.title'),
   Identifier('*'),
   Integer(1),
   Identifier('entry.max$'),
   Identifier('substring$'),
   QuotedVar('sort.key$'),
   Identifier(':=')]],
 ['ITERATE', [Identifier('presort')]],
 ['SORT'],
 ['STRINGS', [Identifier('longest.label')]],
 ['INTEGERS',
  [Identifier('number.label'), Identifier('longest.label.width')]],
 ['FUNCTION',
  [Identifier('initialize.longest.label')],
  [String(''),
   QuotedVar('longest.label'),
   Identifier(':='),
   Integer(1),
   QuotedVar('number.label'),
   Identifier(':='),
   Integer(0),
   QuotedVar('longest.label.width'),
   Identifier(':=')]],
 ['FUNCTION',
  [Identifier('longest.label.pass')],
  [Identifier('number.label'),
   Identifier('int.to.str$'),
   QuotedVar('label'),
   Identifier(':='),
   Identifier('number.label'),
   Integer(1),
   Identifier('+'),
   QuotedVar('number.label'),
   Identifier(':='),
   Identifier('label'),
   Identifier('width$'),
   Identifier('longest.label.width'),
   Identifier('>'),
   FunctionLiteral([Identifier('label'), QuotedVar('longest.label'), Identifier(':='), Identifier('label'), Identifier('width$'), QuotedVar('longest.label.width'), Identifier(':=')]),
   QuotedVar('skip$'),
   Identifier('if$')]],
 ['EXECUTE', [Identifier('initialize.longest.label')]],
 ['ITERATE', [Identifier('longest.label.pass')]],
 ['FUNCTION',
  [Identifier('begin.bib')],
  [Identifier('preamble$'),
   Identifier('empty$'),
   QuotedVar('skip$'),
   FunctionLiteral([Identifier('preamble$'), Identifier('write$'), Identifier('newline$')]),
   Identifier('if$'),
   String('\\begin{thebibliography}{'),
   Identifier('longest.label'),
   Identifier('*'),
   String('}'),
   Identifier('*'),
   Identifier('write$'),
   Identifier('newline$')]],
 ['EXECUTE', [Identifier('begin.bib')]],
 ['EXECUTE', [Identifier('init.state.consts')]],
 ['ITERATE', [Identifier('call.type$')]],
 ['FUNCTION',
  [Identifier('end.bib')],
  [Identifier('newline$'),
   String('\\end{thebibliography}'),
   Identifier('write$'),
   Identifier('newline$')]],
 ['EXECUTE', [Identifier('end.bib')]]]
